module std;

import runtime;

let out_buff: []u8 = new u8[4096];
let out_cursor: int;

func write(b: []u8) {
    for let i = 0; i < b._len; i++ {
        if i + out_cursor >= out_buff._len {
            flush();
        }
    
        out_buff[out_cursor] = b[i];
        out_cursor++;

        let curr_rune = b[i] as i32;
        if curr_rune == '\n' {
            flush();
        }
    }
}

func flush() {
    sys_print(out_buff[:out_cursor]);
    out_cursor = 0;
}

/* ------------------------------------------------------------------------- */

pub func putint(n: int) {
    let digit_buff = new u8[20];

    let is_neg = false;
    if n < 0 {
        is_neg = true;
        n = -n;
    }

    let i = 19; 
    do {
        let digit = n % 10 as rune;
        digit_buff[i] = '0' + digit as u8;

        n /= 10;
        i--;
    } while (n > 0 && i >= 1);

    if is_neg {
        digit_buff[i] = '-' as u8;
        i--;
    }

    write(digit_buff[i+1:]);
}

pub func putr(r: rune) {
    write([r as u8]);
}

pub func puts(s: string) {
    write(s as []u8);
}

