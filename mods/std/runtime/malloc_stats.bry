module runtime;

/* ---------------------------- Memory Statistics --------------------------- */

// MStats contains all the memory information that is maintained by the runtime
// internally.  Other memory information is gathered from the OS as necessary
// (ex: total commit charge, total reserved etc.)
struct MStats {
    // Stores the total number of bytes allocated for live (uncollected)
    // objects. This counter is increased by the allocator on an allocation and
    // decreased by the allocator during a free.  The GC uses this value among
    // others to decide when to collect.  Importantly, any allocation or free
    // which goes through the allocator will update this count even if it does
    // not go through the garbage collector.  Furthermore, this count is
    // accessed concurrently and so must only be mutated via atomic operations.
    xalloc: u64;
}

// The global object storing runtime statistics. 
let mstats: MStats;

/* ---------------------- Allocator Debugging Routines ---------------------- */

pub func _debugPrintHeapLayout() {
    let rs = rtGetState();
    let heap = &rs.heap;

    dputs("* ------------------------------- HEAP LAYOUT ------------------------------ *\n\n");

    dputs("word size = ");
    dputx(M_WORD_SIZE);
    dputs("\nmin alignment = ");
    dputx(M_MIN_ALIGN);
    dputs("\n\n");

    for let i: uint = 0; i < M_N_TOTAL_BINS; i++ {
        let pq = &heap.pages[i];

        dputs("[bin ");
        dputuint(i);
        dputs("]: block size = ");
        dputx(pq.block_size);
        dputs("\n");

        if pq.first == null {
            dputs("  [empty]\n\n");
            continue;
        }

        let j: uint = 0;
        for let page = pq.first; page != null; page = page.next {
            dputs("  [page ");
            dputuint(j);
            dputs("]\n");

            dputs("    flags = ");
            dputx(page.flags as uint);
            dputs("\n    revival chances = ");
            dputuint(page.revival_chances as uint);
            dputs("\n    capacity = ");
            dputx(page.capacity);
            dputs("\n    reserved = ");
            dputx(page.reserved);
            dputs("\n    used blocks = ");
            dputuint(page.n_used_blocks);
            dputs("\n");

            j++;
        }

        dputs("\n");
    }

    dputs("* -------------------------------------------------------------------------- *\n\n");
}

pub func _debugPrintBlockInfo(addr: *u8) {
    let block = unsafe(addr as *MBlock);

    let segment = mGetParentSegment(block);
    let page = segment.getParentPage(block);

    dputs("\n[page]:\n");
    dputs("  flags = ");
    dputx(page.flags as uint);
    dputs("\n  revival chances = ");
    dputuint(page.revival_chances as uint);
    dputs("\n  capacity = ");
    dputx(page.capacity);
    dputs("\n  reserved = ");
    dputx(page.reserved);
    dputs("\n  used blocks = ");
    dputuint(page.n_used_blocks);
    dputs("\n  alloc_free = [");
    debugPrintFreeList(page.alloc_free);
    dputs("  ]\n  local_free = [");
    debugPrintFreeList(page.local_free);
    dputs("  ]\n\n");
}

func debugPrintFreeList(list: *MBlock) {
    for let block = list; block != null; block = block.next {
        dputs("    [block] addr = ");
        unsafe {
            dputptr(block as *u8);
        }
        dputs("\n");
    }
}


