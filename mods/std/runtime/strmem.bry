module runtime;

@abientry("__berry_strcmp")
func strcmp(a, b: string) int {
    // TODO: replace with fast implementation
    
    let size = min(a._len, b._len);

    for let i = 0; i < size; i++ {
        if a[i] != b[i] {
            return a[i] - b[i] as i64;
        }
    }

    return a._len - b._len;
}

func memset(dst: *u8, value: u8, size: uint) {
    // TODO: replace with fast implementation

    for let i: uint = 0; i < size; i++ {
        unsafe {
            *(dst + i) = value;
        }
    }
}

#if (ARCH_SIZE == "64")
@abientry("__berry_strhash")
func strhash(str: string) u64 { // FNV1a hash
    // TODO: replace with a better hash function.

    const FNV_OFFSET: u64 = 0xcbf29ce484222325;
    const FNV_PRIME: u64 = 0x100000001b3;

    let h = FNV_OFFSET;
    for let i = 0; i < str._len; i++ {
        h ^= str[i] as u64;
        h *= FNV_PRIME;
    }

    return h;
}
#end
