module runtime;

const RS_FLAG_MAIN: uint = 1;
const RS_FLAG_THROW: uint = 2;

struct Rstate {
    flags: uint;
    heap: MHeap;
}

func Rstate.swapFlags(flags: uint) uint {
    let old_flags = self.flags;
    self.flags |= flags;
    return old_flags;
}

func thrInit(flags: uint) {
    // Allocate a backing segment for the rstate.
    let page_kind = get_page_kind(@sizeof(Rstate));
    let segment = msegment_sys_alloc(page_kind, SEGMENT_SIZE);

    // Create the rstate object.
    let rstate: *Rstate;
    unsafe {
        // Grab a free block.
        let block = segment.pages[0].pop_free_block();

        // Use it as the backing storage for the rstate.
        rstate = block as *RState
    }
    rstate.flags = flags;

    // Initialize the heap in the backing segment.
    rstate.heap.init(segment);

    // Store rstate into TLS.
    rtSetState(rstate);

    // Ready to go!
}

func thrExit(exit_code: int) {
    let rs = rtGetState();

    // Clean up the thread's local heap.
    rs.heap.cleanup();

    if (rs.flags & RS_FLAG_MAIN) > 0 { // Main thread exits process.
        exit(exit_code);
    }

    // Call the system thread exit handler.
    sysThrExit(exit_code);
}