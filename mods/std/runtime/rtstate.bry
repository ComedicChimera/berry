module runtime;

const RS_FLAG_MAIN: uint = 1;
const RS_FLAG_THROW: uint = 2;

struct RtState {
    flags: uint;
    heap: MHeap;
}

func RtState.swapFlags(flags: uint) uint {
    let old_flags = self.flags;
    self.flags |= flags;
    return old_flags;
}

unsafe func thrInit(flags: uint) {
    // Allocate a backing segment for the runtime state.
    let page_kind = mGetPageKind(@sizeof(RtState));
    let segment = mSegmentAlloc(sysGetThrID(), M_SEGMENT_SIZE, page_kind);
    if segment == null {
        throw("initialization: could not allocate backing memory for runtime state");
    }

    // Grab an initial page from the segment for allocation.
    let page = &segment.pages[0];
    segment.n_used_pages++;
    page.block_size = mRoundToSizeClass(@sizeof(RtState));
    page.makeReady();

    // Allocate space for the runtime state.
    let block = page.popFreeBlock();
    let rs = block as *RtState;

    // Initialize the runtime state.
    rs.flags = flags;
    rs.heap.init(segment, page);

    // Store runtime state into TLS.
    _rtSetState(rs);

    // Ready to go!
}

func thrExit(exit_code: int) {
    let rs = rtGetState();

    if (rs.flags & RS_FLAG_MAIN) > 0 { // Main thread exits process.
        exit(exit_code);
    }

    // Clean up the thread's local heap.
    rs.heap.cleanup();

    // Call the system thread exit handler.
    sysThrExit(exit_code);
}