module runtime;

func dwrite(buff: []u8) {
    // TODO: synchronize printing
    sysWriteErr(buff);
}

func dputs(s: string) {
    dwrite(s as []u8);
}

func dputx(v: uint) {
    if v == 0 {
        dputs("0");
        return;
    }
    
    let digit_buff: [18]u8;

    let n = 17;
    while v > 0 {
        let digit = v & 0xf;
        if digit < 10 {
            digit_buff[n] = (digit as rune) + '0' as u8;
        } else {
            digit_buff[n] = (digit - 10 as rune) + 'a' as u8;
        }

        v >>= 4;
        n--;
    }

    digit_buff[n] = 'x' as u8;
    digit_buff[n-1] = '0' as u8;

    dwrite(digit_buff[n-1:]);
}

unsafe func dputptr(v: *u8) {
    dputx(v as uint);
}

func dputuint(n: uint) {
    let digit_buff: [20]u8;

    let i = 19; 
    do {
        let digit = n % 10 as rune;
        digit_buff[i] = '0' + digit as u8;

        n /= 10;
        i--;
    } while (n > 0 && i >= 1);

    dwrite(digit_buff[i+1:]);
} 