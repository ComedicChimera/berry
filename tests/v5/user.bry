import io.std;

struct User {
    name, email: []u8;
    age: i64;
}

let users: []User = [
    User{"John Doe", "example@gmail.com", 30},
    User{"Jane Doe", "jane@hotmail.com", 27}
];

func print_user(u: *User) {
    std.puts("{name=");
    std.puts(u.name);
    std.puts(", email=");
    std.puts(u.email);
    std.puts(", age=");
    std.putint(u.age);
    std.puts("}\n");
}

func print_users() {
    for let i = 0; i < users._len; i++ {
        print_user(&users[i]);
    }
}

func nomutate(u: User) {
    u.name = "Jessie";
    print_user(&u);
}

func mutate(u: *User) {
    u.name = "James";
    print_user(u);
}

func get_user() User {
    return .{"Bob", "bob@hotmal.com", 25};
}

func set_email(u: User, email: []u8) User {
    u.email = email;
    return u;
}

func main() {
    print_users();

    users[0].age++;
    users[1].email = "jd@outlook.com";

    print_users();

    let new_user = User{email="beans@bb.edu", name="Beans", age=69};
    let new_user_copy = new_user;

    new_user_copy.age = 420;

    print_user(&new_user);
    print_user(&new_user_copy);

    nomutate(new_user);
    print_user(&new_user);

    mutate(&new_user_copy);
    print_user(&new_user_copy);

    let user_ptr: *User = new { "Hello", "ah", 225};
    print_user(user_ptr);

    new_user = get_user();
    new_user.age++;

    print_user(&new_user);

    new_user = set_email(new_user, "ex@beans.edu");
    std.puts(new_user.email);
}