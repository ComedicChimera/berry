// Useful API Functions
@[extern, callconv("win64")]
func ExitProcess(exit_code: u32);

@[extern, callconv("win64")]
func GetStdHandle(n_handle: u32) *u8;

@[extern, callconv("win64")]
func WriteConsoleA(h: *u8, buff: *u8, n_to_write: i32, n_written: *i32, reserved: *u8) bool;

// Berry Runtime
@extern
func __LibBerry_Init();

@abientry
func __LibBerry_Start() {
    __LibBerry_Init();

    main();

    ExitProcess(0);
}

func _panic() {
    ExitProcess(1);
}

// ------------------------------------------------------------------------- //

// Buffered IO example
let stdout: *u8 = GetStdHandle(-11 as u32);
let out_buff: [1024]u8;
let out_cursor: i64;

func write(b: []u8) {
    for let i = 0; i < b._len; i++ {
        if i + out_cursor >= out_buff._len {
            flush();
        }

        out_buff[i + out_cursor] = b[i];
        out_cursor++;

        let curr_rune = b[i] as i32;
        if curr_rune == '\n' || curr_rune == '\r' {
            flush();
        }
    }
    
}

func flush() {
    WriteConsoleA(stdout, out_buff._ptr, out_cursor as i32, null, null);
    out_cursor = 0;
}

// ------------------------------------------------------------------------- //

func putRune(c: i32) {
    let data = [c as u8];
    write(data);
}

func putInt(n: i64) {
    let digit_buff: [20]u8;

    let i = 19; 
    do {
        let digit = n % 10 as i32;
        digit_buff[i] = '0' + digit as u8;

        n /= 10;
        i--;
    } while (n > 0 && i >= 0);

    digit_buff = digit_buff[i+1:];
    write(digit_buff);
}

// ------------------------------------------------------------------------- //

func swap(arr: []i64, i, j: i64) {
    let tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}

func partition(arr: []i64, lo, hi: i64) i64 {
    let p = hi - 1;

    for let i = 0; i < p; i++ {
        if arr[i] > arr[p] {
            swap(arr, i, p);
            p--;
            swap(arr, i, p);
        }
    }

    return p;
}

func qsort(arr: []i64, lo, hi: i64) {
    if hi - lo < 2 {
        return;
    }

    let p = partition(arr, lo, hi);
    qsort(arr, lo, p);
    qsort(arr, p, hi);
}

func quickSort(arr: []i64) {
    qsort(arr, 0, arr._len);
}

func printArray(arr: []i64) {
    putRune('[');

    for let i = 0; i < arr._len; i++ {
        putInt(arr[i]);
        write(", ");    
    }

    write("]\n");
}

func rule110() {
    let board: i64 = 1;

    let table = [0, 2, 2, 2, 0, 2, 2, 0];
    for let k = 0; k < 10; k++ {
        for let i = 0; i < 62; i++ {
            let cell = (board >> i) & 0b111;

            board &= table[cell] << i;
        }

        for let i = 0; i < 64; i++ {
            if (board >> i & 1) == 0 {
                putRune(' ');
            } else {
                putRune('*');
            }
        }
    }
}

func main() {
    write("Hello, world!\n");

    rule110();
    
    let arr = [6, 8, 1, 4, 3, 2, 9, 7, 6, 5];
    quickSort(arr);
    printArray(arr);

    write("Big man"[1:5]);
    putRune('\n');
}